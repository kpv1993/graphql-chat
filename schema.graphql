type Chat implements Node {
  content: String
  createdAt: DateTime
  from: String
  id: ID
}

"""A connection to a list of items."""
type ChatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo

  """A list of edges."""
  edges: [ChatEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int
}

"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat

  """A cursor for use in pagination."""
  cursor: String
}

input ChatFilter {
  """Logical AND on all given filters."""
  AND: [ChatFilter ]

  """Logical OR on all given filters."""
  OR: [ChatFilter ]
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String ]

  """All values that are not contained in given list."""
  content_not_in: [String ]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime ]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime ]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  from: String

  """All values that are not equal to given value."""
  from_not: String

  """All values that are contained in given list."""
  from_in: [String ]

  """All values that are not contained in given list."""
  from_not_in: [String ]

  """All values less than the given value."""
  from_lt: String

  """All values less than or equal the given value."""
  from_lte: String

  """All values greater than the given value."""
  from_gt: String

  """All values greater than or equal the given value."""
  from_gte: String

  """All values containing the given string."""
  from_contains: String

  """All values not containing the given string."""
  from_not_contains: String

  """All values starting with the given string."""
  from_starts_with: String

  """All values not starting with the given string."""
  from_not_starts_with: String

  """All values ending with the given string."""
  from_ends_with: String

  """All values not ending with the given string."""
  from_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID ]

  """All values that are not contained in given list."""
  id_not_in: [ID ]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

enum ChatOrderBy {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  from_ASC
  from_DESC
  id_ASC
  id_DESC
}

input CreateChat {
  content: String
  from: String
}

input CreateChatInput {
  content: String
  from: String
  clientMutationId: String
}

type CreateChatPayload {
  viewer: Viewer
  clientMutationId: String
  chat: Chat
  edge: ChatEdge
}

input CreateUser {
  dateOfBirth: DateTime
  name: String
}

"""
If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
"""
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer
}

scalar DateTime

input DeleteChatInput {
  id: ID
  clientMutationId: String
}

type DeleteChatPayload {
  viewer: Viewer
  clientMutationId: String
  chat: Chat
  edge: ChatEdge
  deletedId: ID
}

input DeleteUserInput {
  id: ID
  clientMutationId: String
}

type DeleteUserPayload {
  viewer: Viewer
  clientMutationId: String
  user: User
  edge: UserEdge
  deletedId: ID
}

"""HelloPayload"""
type HelloPayload {
  message: String
}

input InvokeFunctionInput {
  name: String
  input: String
  clientMutationId: String
}

type InvokeFunctionPayload {
  result: String
  clientMutationId: String
}

type Mutation {
  createChat(input: CreateChatInput ): CreateChatPayload
  updateChat(input: UpdateChatInput ): UpdateChatPayload
  updateUser(input: UpdateUserInput ): UpdateUserPayload
  updateOrCreateChat(input: UpdateOrCreateChatInput ): UpdateOrCreateChatPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput ): UpdateOrCreateUserPayload
  deleteChat(input: DeleteChatInput ): DeleteChatPayload
  deleteUser(input: DeleteUserInput ): DeleteUserPayload
  createUser(input: SignupUserInput ): CreateUserPayload
  invokeFunction(input: InvokeFunctionInput ): InvokeFunctionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  viewer: Viewer

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID
  ): Node
}

input SignupUserInput {
  dateOfBirth: DateTime
  name: String
  clientMutationId: String
}

input UpdateChat {
  content: String
  from: String
  id: ID
}

input UpdateChatInput {
  content: String
  from: String
  id: ID
  clientMutationId: String
}

type UpdateChatPayload {
  viewer: Viewer
  clientMutationId: String
  chat: Chat
  edge: ChatEdge
}

input UpdateOrCreateChatInput {
  update: UpdateChat
  create: CreateChat
  clientMutationId: String
}

type UpdateOrCreateChatPayload {
  viewer: Viewer
  clientMutationId: String
  chat: Chat
  edge: ChatEdge
}

input UpdateOrCreateUserInput {
  update: UpdateUser
  create: CreateUser
  clientMutationId: String
}

type UpdateOrCreateUserPayload {
  viewer: Viewer
  clientMutationId: String
  user: User
  edge: UserEdge
}

input UpdateUser {
  dateOfBirth: DateTime
  id: ID
  name: String
}

input UpdateUserInput {
  dateOfBirth: DateTime
  id: ID
  name: String
  clientMutationId: String
}

type UpdateUserPayload {
  viewer: Viewer
  clientMutationId: String
  user: User
  edge: UserEdge
}

type User implements Node {
  dateOfBirth: DateTime
  id: ID
  name: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo

  """A list of edges."""
  edges: [UserEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String
}

input UserFilter {
  """Logical AND on all given filters."""
  AND: [UserFilter ]

  """Logical OR on all given filters."""
  OR: [UserFilter ]
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime ]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime ]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID ]

  """All values that are not contained in given list."""
  id_not_in: [ID ]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String ]

  """All values that are not contained in given list."""
  name_not_in: [String ]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

enum UserOrderBy {
  dateOfBirth_ASC
  dateOfBirth_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

"""This is the famous Relay viewer object"""
type Viewer {
  allChats(filter: ChatFilter, orderBy: ChatOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  user: User
  Chat(id: ID): Chat
  User(id: ID): User

  """hello"""
  hello(name: String): HelloPayload
  id: ID
}
